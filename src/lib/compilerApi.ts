/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/aci": {
    /** Generate an Aeternity Contract Interface (ACI) for contract */
    post: operations["GenerateACI"];
  };
  "/compile": {
    /** Compile a sophia contract from source and return byte code */
    post: operations["CompileContract"];
  };
  "/decode-call-result": {
    /** Decode the result of contract call */
    post: operations["DecodeCallResult"];
  };
  "/decode-call-result/bytecode": {
    /** Decode the result of contract call from Bytecode */
    post: operations["DecodeCallResultBytecode"];
  };
  "/encode-calldata": {
    /** Encode Sophia function call according to sophia ABI. */
    post: operations["EncodeCalldata"];
  };
  "/decode-calldata/bytecode": {
    /** Identify function name and arguments in Calldata for a compiled contract */
    post: operations["DecodeCalldataBytecode"];
  };
  "/decode-calldata/source": {
    /** Identify function name and arguments in Calldata for a (partial) contract */
    post: operations["DecodeCalldataSource"];
  };
  "/fate-assembler": {
    /** Get FATE assembler code from bytecode */
    post: operations["GetFateAssemblerCode"];
  };
  "/validate-byte-code": {
    /** Verify that an encoded byte array is the result of compiling a given contract */
    post: operations["ValidateByteCode"];
  };
  "/compiler-version": {
    /** Extract compiler version from bytecode */
    post: operations["GetCompilerVersion"];
  };
  "/version": {
    /** Get the version of the underlying Sophia compiler version */
    get: operations["Version"];
  };
  "/api-version": {
    /** Get the version of the API */
    get: operations["ApiVersion"];
  };
  "/api": {
    /** Get the Api description */
    get: operations["Api"];
  };
}

export interface definitions {
  Contract: {
    code: string;
    options?: definitions["CompileOpts"];
  };
  CompileOpts: {
    /** @description An explicit file system, mapping file names to file content */
    file_system?: { [key: string]: unknown };
    /** @description Name of contract source file - only used in error messages */
    src_file?: string;
  };
  ApiVersion: {
    /** @description API compiler version */
    "api-version": string;
  };
  CompilerVersion: {
    /** @description Sophia compiler version */
    version: string;
  };
  Error: {
    reason: string;
  };
  CompilerErrors: definitions["CompilerError"][];
  CompilerError: {
    type: string;
    pos: definitions["ErrorPos"];
    message: string;
    context?: string;
  };
  ErrorPos: {
    file?: string;
    line: number;
    col: number;
  };
  ACI: {
    encoded_aci: { [key: string]: unknown };
    external_encoded_aci?: { [key: string]: unknown }[];
    interface: string;
  };
  /** @description Swagger API description */
  API: { [key: string]: unknown };
  ByteCode: {
    bytecode: definitions["EncodedByteArray"];
  };
  SophiaCallResultInput: {
    /** @description (Possibly partial) Sophia contract code/interface */
    source: string;
    options?: definitions["CompileOpts"];
    /** @description Name of the called function */
    function: string;
    /** @description Call result type (ok | revert | error) */
    "call-result": string;
    /** @description Call result value (ABI encoded data or error string) */
    "call-value": string;
  };
  SophiaCallResult: unknown;
  SophiaBinaryData: {
    "sophia-type": string;
    data: string;
  };
  SophiaJsonData: {
    data: { [key: string]: unknown };
  };
  FunctionCallInput: {
    /** @description (Possibly partial) Sophia contract code */
    source: string;
    options?: definitions["CompileOpts"];
    /** @description Name of function to call */
    function: string;
    /** @description Array of function call arguments */
    arguments: string[];
  };
  BytecodeCallResultInput: {
    /** @description Compiled contract */
    bytecode: definitions["EncodedByteArray"];
    /** @description Name of the called function */
    function: string;
    /** @description Call result type (ok | revert | error) */
    "call-result": string;
    /** @description Call result value (ABI encoded data or error string) */
    "call-value": string;
  };
  DecodeCalldataBytecode: {
    /** @description Calldata to dissect */
    calldata: definitions["EncodedByteArray"];
    /** @description Compiled contract */
    bytecode: definitions["EncodedByteArray"];
  };
  DecodeCalldataSource: {
    /** @description (Possibly partial) Sophia contract code */
    source: string;
    options?: definitions["CompileOpts"];
    /** @description Calldata to dissect */
    calldata: definitions["EncodedByteArray"];
    /** @description Name of the function to call */
    function: string;
  };
  ByteCodeInput: {
    /** @description Compiled contract */
    bytecode: definitions["EncodedByteArray"];
  };
  ValidateByteCodeInput: {
    /** @description Compiled contract */
    bytecode: definitions["EncodedByteArray"];
    /** @description Sophia contract source code */
    source: string;
    options?: definitions["CompileOpts"];
  };
  DecodedCallresult: {
    function: string;
    result: { [key: string]: unknown };
  };
  DecodedCalldata: {
    function: string;
    arguments: { [key: string]: unknown }[];
  };
  Calldata: {
    calldata: definitions["EncodedByteArray"];
  };
  /** @description Prefixed (cb_) Base64Check encoded byte array */
  EncodedByteArray: string;
  FateAssembler: {
    /** @description Fate assembler code */
    "fate-assembler": string;
  };
}

export interface operations {
  /** Generate an Aeternity Contract Interface (ACI) for contract */
  GenerateACI: {
    parameters: {
      body: {
        /** contract code */
        body: definitions["Contract"];
      };
    };
    responses: {
      /** ACI for contract */
      200: {
        schema: definitions["ACI"];
      };
      /** Compiler errors */
      400: {
        schema: definitions["CompilerErrors"];
      };
    };
  };
  /** Compile a sophia contract from source and return byte code */
  CompileContract: {
    parameters: {
      body: {
        /** contract code */
        body: definitions["Contract"];
      };
    };
    responses: {
      /** Byte code response */
      200: {
        schema: definitions["ByteCode"];
      };
      /** Invalid contract */
      400: {
        schema: definitions["CompilerErrors"];
      };
    };
  };
  /** Decode the result of contract call */
  DecodeCallResult: {
    parameters: {
      body: {
        /** Binary data in Sophia ABI format */
        body: definitions["SophiaCallResultInput"];
      };
    };
    responses: {
      /** Json encoded data */
      200: {
        schema: definitions["SophiaCallResult"];
      };
      /** Invalid data */
      400: {
        schema: definitions["CompilerErrors"];
      };
    };
  };
  /** Decode the result of contract call from Bytecode */
  DecodeCallResultBytecode: {
    parameters: {
      body: {
        /** Call result + compiled contract */
        body: definitions["BytecodeCallResultInput"];
      };
    };
    responses: {
      /** Json encoded data */
      200: {
        schema: definitions["DecodedCallresult"];
      };
      /** Invalid data */
      400: {
        schema: definitions["CompilerErrors"];
      };
    };
  };
  /** Encode Sophia function call according to sophia ABI. */
  EncodeCalldata: {
    parameters: {
      body: {
        /** Sophia function call - contract code + function name + arguments */
        body: definitions["FunctionCallInput"];
      };
    };
    responses: {
      /** Binary encoded calldata */
      200: {
        schema: definitions["Calldata"];
      };
      /** Invalid contract */
      400: {
        schema: definitions["CompilerErrors"];
      };
    };
  };
  /** Identify function name and arguments in Calldata for a compiled contract */
  DecodeCalldataBytecode: {
    parameters: {
      body: {
        /** Calldata + compiled contract */
        body: definitions["DecodeCalldataBytecode"];
      };
    };
    responses: {
      /** Binary encoded calldata */
      200: {
        schema: definitions["DecodedCalldata"];
      };
      /** Invalid contract */
      400: {
        schema: definitions["Error"];
      };
    };
  };
  /** Identify function name and arguments in Calldata for a (partial) contract */
  DecodeCalldataSource: {
    parameters: {
      body: {
        /** Calldata + contract (stub) code */
        body: definitions["DecodeCalldataSource"];
      };
    };
    responses: {
      /** Binary encoded calldata */
      200: {
        schema: definitions["DecodedCalldata"];
      };
      /** Invalid data */
      400: {
        schema: definitions["CompilerErrors"];
      };
    };
  };
  /** Get FATE assembler code from bytecode */
  GetFateAssemblerCode: {
    parameters: {
      body: {
        /** contract byte array */
        body: definitions["ByteCodeInput"];
      };
    };
    responses: {
      /** The FATE assembler */
      200: {
        schema: definitions["FateAssembler"];
      };
      /** Invalid data */
      400: {
        schema: definitions["Error"];
      };
    };
  };
  /** Verify that an encoded byte array is the result of compiling a given contract */
  ValidateByteCode: {
    parameters: {
      body: {
        /** contract byte array and source code */
        body: definitions["ValidateByteCodeInput"];
      };
    };
    responses: {
      /** Validation successful */
      200: unknown;
      /** Invalid contract */
      400: {
        schema: definitions["CompilerErrors"];
      };
    };
  };
  /** Extract compiler version from bytecode */
  GetCompilerVersion: {
    parameters: {
      body: {
        /** contract byte array */
        body: definitions["ByteCodeInput"];
      };
    };
    responses: {
      /** The compiler version */
      200: {
        schema: definitions["CompilerVersion"];
      };
      /** Invalid data */
      400: {
        schema: definitions["Error"];
      };
    };
  };
  /** Get the version of the underlying Sophia compiler version */
  Version: {
    responses: {
      /** Sophia compiler version */
      200: {
        schema: definitions["CompilerVersion"];
      };
      /** Error */
      500: {
        schema: definitions["Error"];
      };
    };
  };
  /** Get the version of the API */
  ApiVersion: {
    responses: {
      /** Sophia compiler version */
      200: {
        schema: definitions["ApiVersion"];
      };
      /** Error */
      500: {
        schema: definitions["Error"];
      };
    };
  };
  /** Get the Api description */
  Api: {
    responses: {
      /** API description */
      200: {
        schema: definitions["API"];
      };
      /** Error */
      400: {
        schema: definitions["Error"];
      };
    };
  };
}

export interface external {}
